{"version":3,"sources":["server.js"],"names":["express","require","app","port","process","env","PORT","Router","path","bodyParser","bcrypt","body","join","__dirname","set","addressID","current_realtorID","use","json","current_username","extended","realtor","Pool","connectionParams","urlencoded","DATABASE_URL","rejectUnauthorized","host","user","connectionString","ssl","log","pg","Client","database","err","router","get","req","res","render","title","post","validationResult","errors","isEmpty","status","send","array","redirect","pool","query","property_results","result","action","addAddress","concat","street","city","state","zip","console","addressid","insertProperty","propertytype","price","size","num_bedroom","num_bathroom","updateAddress","rows","length","username","hp","regeneratorRuntime","async","_context","prev","next","password","firstName","lastName","phoneno","email","awrap","hash","sent","stop","_context2","agency","realtorID","abrupt","compareSync","realtor_results","properties","name","customer_results","results","customer","module","exports"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express')\r\nconst app = express()\r\nconst bodyParser = require('body-parser');\r\nconst port = process.env.PORT || 3000\r\nconst router = express.Router();\r\nconst path = require('path') \r\nconst pg = require('pg')\r\nconst bcrypt = require('bcrypt') \r\nconst { body, validationResult } = require('express-validator'); \r\n\r\n//Set location for accessing files\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n//Set the view engine for the express app  \r\napp.set(\"view engine\", \"pug\")\r\nvar current_username = \"\";\r\nvar current_realtorID = 2;\r\nvar addressID \r\nvar realtor = true;\r\n\r\n//for parsing application/json\r\napp.use(bodyParser.json());\r\napp.use(express.json())\r\n\r\n//for parsing application/xwww-\r\napp.use(bodyParser.urlencoded({ extended:true }));\r\n//form-urlencoded\r\n\r\nconst Pool = require('pg').Pool\r\n\r\nvar connectionParams =  null;\r\nif (process.env.DATABASE_URL != null){\r\n    connectionParams = {\r\n        connectionString: process.env.DATABASE_URL,\r\n        ssl: { rejectUnauthorized: false }\r\n    } \r\n}\r\n\r\nelse{\r\n\tconnectionParams = {\r\n\t\thost: 'willowrealestate.postgres.database.azure.com',\r\n\t\tuser: 'team5',\r\n\t\tpassword: 'Willow5!',\r\n\t\tdatabase: 'postgres',\r\n\t\tport: 5432 ,\r\n\t\tssl: true\r\n   }\r\n }\r\n\r\n\r\nconsole.log(connectionParams)\r\nconst pool = new pg.Client(connectionParams)\r\n\r\npool.connect(err => {\r\n    if (err) throw err; \r\n});\r\n \r\nrouter.get('/', (req, res) => {\r\n  res.render('index', { title: 'Willow' });\r\n})\r\n\r\n\t\r\n \r\nrouter.post('/',\r\n\t\t(req,res) => {\r\n\t\t\r\n\t\tconst errors = validationResult(req);\r\n\t\tif(!errors.isEmpty()) {\r\n\t\t\treturn res.status(400).send({ errors: errors.array() });\r\n\t\t}\r\n\t\t\r\n\t\tres.redirect('/')\r\n\r\n})\r\n\r\nrouter.get('/insert', (req,res) => {  \r\n\t \r\n\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID` , (err,property_results) => {\r\n            console.log(err, property_results)\r\n          res.render('insert', {  \r\n\t\t      properties: property_results.rows\r\n\t\t\t}); \r\n\t\t\t\r\n\t\r\n\t});\r\n\t \r\n\t\r\n\t\r\n\t\r\n})  \r\n\r\nrouter.post('/insert',   (req, res) => {  \r\n\tif(req.body.action && req.body.action == 'add'){\r\n\t\tvar addAddress = `INSERT INTO address (street, city, state, zip) VALUES ( '${req.body.street}', '${req.body.city}', '${req.body.state}', '${req.body.zip}' ) ON conflict do nothing RETURNING  addressID` \r\n\t\r\n\t\tpool.query(addAddress, (err,result) => {\r\n\t\t\tif( !result ) { return }\r\n\t\t\t    addressID = result.rows[0].addressid \r\n\t\t\t\tconsole.log(err,result)\r\n\t\t\t\tvar insertProperty = `INSERT INTO property (propertyType, price, size, num_bedroom, num_bathroom,realtorID, addressID) VALUES ('${req.body.propertytype}', '${req.body.price}','${req.body.size}','${req.body.num_bedroom}','${req.body.num_bathroom}','${current_realtorID}', '${addressID}')`\r\n\t\t\t\r\n\t\t\t\t\tpool.query(insertProperty, (err, result) => {\r\n\t\t\t\t\t\tconsole.log(err, result) \r\n\t\t\t\t\t\tres.redirect('/insert') \r\n\t\t\t\t\t})  \r\n\t\t\t}) \r\n\t\t\r\n\t\t\t\r\n\t\tvar insertProperty = `INSERT INTO property (propertyType, price, size, num_bedroom, num_bathroom,realtorID, addressID) VALUES ('${req.body.propertytype}', '${req.body.price}','${req.body.size}','${req.body.num_bedroom}','${req.body.num_bathroom}','${current_realtorID}', '${addressID}')`\r\n\t\t\t\r\n\t\t\t\r\n\t\tpool.query(insertProperty, (err, result) => {\r\n\t\t\tconsole.log(err, result) \r\n\t\t\tres.redirect('/insert') \r\n\t\t})   \r\n\t}\r\n\t\t  \r\n\tif(req.body.action && req.body.action == 'update'){ \r\n\t\r\n\tvar updateAddress = `UPDATE address SET street = '${req.body.street}', city = '${req.body.city}', state = '${req.body.state}', zip = '${req.body.zip}' RETURNING addressID`\r\n\t\r\n\tpool.query(updateAddress , (err,result) => {\r\n\t\tif(result.rows.length == 0){\r\n\t\t\treturn\r\n\t\t}else{\r\n\t\t\taddressID = result.rows[0].addressid \r\n\t\t\t\r\n\t\t\tvar updateProperty = `UPDATE property SET propertyType = '${req.body.propertytype}', price = '${req.body.price}', size='${req.body.size}', num_bedroom = '${req.body.num_bedroom}', num_bathroom = '${req.body.num_bathroom}' WHERE addressID = '${addressID}'`\r\n\t\r\n\t\t\tpool.query( updateProperty , (err,result) => {\r\n\t\t\tconsole.log(err, result)\r\n\r\n\t\t\tres.redirect('/insert')\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t\r\n\t\r\n}\r\n\r\n\tif(req.body.action && req.body.action == 'delete'){ \r\n\t\tpool.query(`DELETE FROM property WHERE addressID = '${addressID}'`, (err,result) => { \r\n\t\tconsole.log(err, result) \r\n\t\t\r\n\t\tres.redirect('/insert')\r\n\t\t\r\n\t\t})\r\n\t}\r\n}) \r\n\r\nrouter.get('/register', (req,res) => { \r\n\tres.render('register')\r\n}) \r\n\r\nrouter.post('/register', (req,res) => {\r\n\tif(req.body.action && req.body.action == 'customer'){\r\n\t\trealtor = false;\r\n\t\tres.redirect('/customersignup') \r\n\t\t\r\n\t}\r\n\tif(req.body.action && req.body.action == 'realtor'){\r\n\t\trealtor = true;\r\n\t\tres.redirect('/realtorsignup')\r\n\t}\r\n})\r\n\r\n\r\nrouter.get('/customersignup',  (req,res) => {\r\n\tres.render('customersignup')\r\n\r\n})\r\n\r\nrouter.post('/customersignup' ,   async (req,res) => {\r\n\t\r\n\t\r\n\tif( !req.body.username || !req.body.password || !req.body.firstName || !req.body.lastName || !req.body.phoneno || !req.body.email){\r\n\t\t\r\n\t\tres.redirect('/customersignuperror')\r\n\t}else{\r\n\t \r\n\t  const hp = await bcrypt.hash(req.body.password, 10)   \r\n\t \r\n\t pool.query(`INSERT INTO customer(user_name,password,first_name,last_name,phone_number,email)\r\n\t\tVALUES ( '${req.body.username}', '${hp}', '${req.body.firstName}', '${req.body.lastName}', '${req.body.phoneno}', '${req.body.email}' ) `, (err, result) => {\r\n\t\t current_username = req.body.username; \r\n\t\t \r\n\t\t res.redirect('/customerlogin')\r\n\t\t \r\n\t\t } );  \r\n\t\t\r\n\t}\r\n\t\r\n})\r\n\r\nrouter.get('/customersignuperror' , (req,res) => {\r\n\tres.render('customersignuperror')\r\n\t\r\n})\r\n\r\nrouter.post('/customersignuperror', (req,res) => {\r\n\tif( req.body.action && req.body.action == 'try again' ){ \r\n\t\t  res.redirect('/customersignup')\r\n\t} \r\n})\r\n\t\r\n\r\nrouter.get('/realtorsignup', (req,res) => {\r\n\tres.render('realtorsignup')\r\n\t\r\n})\r\n\r\nrouter.post('/realtorsignup', async (req,res) => {\r\n\tif( !req.body.realtorID || !req.body.username || !req.body.password || !req.body.agency || !req.body.firstName ||\r\n\t !req.body.lastName || !req.body.phoneno || !req.body.email)  \r\n\t \r\n\t return res.redirect('/realtorsignuperror')\r\n\t\r\n\tconst hp = await bcrypt.hash(req.body.password, 10)\r\n\t\r\n\tpool.query(`INSERT INTO realtor(realtorID, user_name,password, agency, first_name,last_name,phone_number,email)\r\n\t\tVALUES ( '${req.body.realtorID}' ,'${req.body.username}', '${hp}', '${req.body.agency}','${req.body.firstName}', '${req.body.lastName}', '${req.body.phoneno}', '${req.body.email}' ) \r\n\t `, (err, result) => {\r\n\t\t current_realtorID = req.body.realtorID;\r\n\t\t current_username = req.body.username;\r\n\t\tres.redirect('/realtorlogin')\r\n\t\t\r\n\t\t} ); \r\n\t\r\n\t\r\n})\r\n\r\nrouter.get('/realtorsignuperror' , (req,res) => { \r\n\t res.render('realtorsignuperror')\r\n}) \r\n\r\nrouter.post('/realtorsignuperror' , (req,res) => {\r\n\tif( req.body.action && req.body.action == 'try again' ){ \r\n\t\t  res.redirect('/realtorsignup')\r\n\t} \r\n\t\r\n})\r\n\r\nrouter.get('/invalid', (req,res) => {\r\n\tres.render('invalidlogin')\r\n\t\r\n})\r\n\r\nrouter.post('/invalid', (req,res) => { \r\n\tif(realtor){\r\n\t\tres.redirect('/realtorlogin')\r\n\t}else{\r\n\t\tres.redirect('/customerlogin')\r\n\t}\r\n\t\r\n})\r\n \r\nrouter.get('/login' , (req,res) => {\r\n\tres.render('index')\r\n\t\r\n})\r\n\r\nrouter.post('/login' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'customer') {\r\n\t\tres.redirect('/customerlogin')\r\n\t}\t\r\n\tif(req.body.action && req.body.action == 'realtor') {\r\n\t\tres.redirect('/realtorlogin')\r\n\t}\t\r\n\t \r\n})\r\n\r\n\r\nrouter.get('/customerlogin', (req,res) => {\r\n\tres.render('customerlogin')\r\n\t\r\n})\r\n\r\n\r\n\r\nrouter.post('/customerlogin',    (req,res) => { \r\n \r\nrealtor = false\r\n//check user name and password with db\r\n\tif(req.body.action && req.body.action == 'login'){\r\n \t\tcurrent_username = req.body.username;\r\n\t\t\t pool.query(`SELECT * FROM CUSTOMER WHERE user_name = '${req.body.username}'`, (err,result) => {\r\n\t\t\t\tconsole.log(err,result) \r\n\t\t\t\t\r\n\t\t\t\tif(result.rows.length == 0) {\r\n\t\t\t\t\tres.redirect('/nocustomer') \r\n\t\t\t\t}\r\n\t\t\t\tif(result.rows.length > 0){\r\n\t\t\t\t\tvar password = result.rows[0].password\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(  bcrypt.compareSync(req.body.password, password) ){\r\n\t\t\t\t\t\tres.redirect('/customerpanel')\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tres.redirect('/invalid') \r\n\t\t\t\t\t\tconsole.log(req)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t}); \r\n\t\t\t}\r\n\t \r\n\t\t \r\n\t\r\n\tif(req.body.action && req.body.action == 'register'){\r\n\t\tres.redirect('/register');\r\n\t}\r\n\t\r\n })\r\n\r\nrouter.get('/nocustomer' , (req,res) => {\r\n\tres.render('nocustomer')\r\n})\r\n\r\nrouter.post('/nocustomer' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'try again')\r\n\t\tres.redirect('/customerlogin')\r\n\tif(req.body.action && req.body.action == 'register')\r\n\t\tres.redirect('/customersignup')\r\n\t\r\n\t\r\n})\r\n\r\nrouter.get('/norealtor' , (req,res) => {\r\n\tres.render('norealtor')\r\n})\r\n\r\nrouter.post('/norealtor' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'try again')\r\n\t\tres.redirect('/realtorlogin')\r\n\tif(req.body.action && req.body.action == 'register')\r\n\t\tres.redirect('/realtorsignup')\r\n\t\r\n\t\r\n})\r\n\r\nrouter.get('/realtorlogin', (req,res) => {\r\n\tres.render('realtorlogin')\r\n\t\r\n})\r\n\r\n\r\nrouter.post('/realtorlogin', (req,res) => { \r\n\r\nrealtor = true\r\n\r\n//check user name and password with db\r\n\tif(req.body.action && req.body.action == 'login'){\r\n\t\t   \r\n\t\t\tcurrent_username = req.body.username;\r\n\t\t\t pool.query(`SELECT * FROM realtor WHERE user_name = '${req.body.username}'`, (err,result) => {\r\n\t\t\t\tconsole.log(err,result)\r\n\t\t\t\t\r\n\t\t\t\tif(result.rows.length == 0)\r\n\t\t\t\t\tres.redirect('/norealtor') \r\n\t\t\t\t\r\n\t\t\t\tif(result.rows.length > 0){\r\n\t\t\t\t\tvar password = result.rows[0].password\r\n\t\t\t\t\t\r\n\t\t\t\t\tif( bcrypt.compareSync(req.body.password, password) ){\r\n\t\t\t\t\t\tcurrent_realtorID = result.rows[0].realtorID\r\n\t\t\t\t\t\tres.redirect('/realtorpanel')\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t res.redirect('/invalid') \r\n\t\t\t\t\t\t console.log(req)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t\t\t\r\n\t}\r\n\t \r\n\t\t \r\n\t\r\n\tif(req.body.action && req.body.action == 'register'){\r\n\t\tres.redirect('/register');\r\n\t}\r\n\t\r\n })\r\n\r\n\r\n \r\nrouter.get('/realtorpanel', (req,res) => {\r\n\t\r\n\tpool.query(`SELECT * FROM realtor WHERE user_name = '${current_username}'`, (err,realtor_results) => {\r\n            console.log(err, realtor_results)\r\n         \r\n             res.render('realtorpanel', { \r\n                     name: current_username,\r\n                      realtor: realtor_results.rows[0] \r\n\t\t\t});\r\n\t});   \r\n\t \r\n })\r\n \r\n router.post('/realtorpanel', (req,res) => {\r\n\t \r\n\t\tif(req.body.action && req.body.action == 'crud'){\r\n\t\t\tres.redirect('/insert')\r\n\t\t}\r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change password'){\r\n\t\t\tres.redirect('/realtorchangepassword')\r\n\t\t\t\t\r\n\t\t}   \r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change password'){\r\n\t\t\tres.redirect('/realtorchangephoneno')\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change email'){\r\n\t\t\tres.redirect('/realtorchangeemail')\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\t\t\r\n\t\tif(req.body.action && req.body.action == 'change agency'){\r\n\t\t\tres.redirect('/realtorchangeagency')\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change phone number'){\r\n\t\t\tres.redirect('/realtorchangephoneno')\r\n\t\t}\t\t\r\n\t\t\t\t\r\n\t\tif(req.body.action && req.body.action == 'go to listings'){\r\n\t\t\tres.redirect('/listingsr')\r\n\t\t}  \r\n\t \r\n })\r\n \r\nrouter.get('/listingsr', (req,res) => {\r\n\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID WHERE realtorID = '${current_realtorID}' ` , (err,property_results) => {\r\n            console.log(err, property_results)\r\n          res.render('listingsr', {  \r\n\t\t      properties: property_results.rows\r\n\t\t\t}); \r\n\t\t\t\r\n\t\r\n\t});\r\n })\r\n\r\nrouter.post('/listingsr', (req,res) => {\r\n\tif(req.body.action && req.body.action == 'Order by Housing Type') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY propertytype` , (err,results) =>  {\r\n\t\t\tres.render('listingsr', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t})\r\n\t}else if(req.body.action && req.body.action == 'Order by Price') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY price`, (err,results) =>  {\r\n\t\t\tres.render('listingsr', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Order by Number of Bedrooms') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY num_bedroom`, (err,results) =>  {\r\n\t\t\tres.render('listingsr', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Order by Number of Bathrooms') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY num_bathroom`, (err,results) =>  {\r\n\t\t\tres.render('listingsr', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Order by Zip Code') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY zip`, (err,results) =>  {\r\n\t\t\tres.render('listingsr', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/realtorchangeagency', (req,res) => {\r\n\tres.render('realtorchangeagency')\r\n\r\n})\r\n\r\nrouter.post('/realtorchangeagency' , (req,res) => {\r\n\tpool.query(`UPDATE realtor SET agency = '${req.body.agency}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t \r\n})\r\n\r\nrouter.get('/realtorchangepassword' , (req,res) => {\r\n\tres.render('realtorchangepassword')\r\n})\r\n\r\nrouter.post('/realtorchangepassword', (req,res) => {\r\n\tpool.query(`UPDATE realtor SET password = '${req.body.password}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/realtorchangeemail', (req,res) => {\r\n\tres.render('realtorchangeemail')\r\n\r\n})\r\n\r\nrouter.post('/realtorchangeemail' , (req,res) => {\r\n\tpool.query(`UPDATE realtor SET email = '${req.body.email}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t \r\n})\r\n\r\nrouter.get('/realtorchangephoneno' , (req,res) => {\r\n\tres.render('realtorchangephoneno')\r\n})\r\n\r\nrouter.post('/realtorchangephoneno', (req,res) => {\r\n\tpool.query(`UPDATE realtor SET phone_number = '${req.body.phoneno}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t\r\n})\r\n\r\n\r\n\r\nrouter.get('/customerpanel', (req,res) => { \r\n\t\r\n\tpool.query(`SELECT * FROM customer WHERE user_name = '${current_username}'`, (err,customer_results) => {\r\n            console.log(err, customer_results)\r\n         \r\n            res.render('customerpanel', { \r\n                     name: current_username,\r\n                      customer: customer_results.rows[0] \r\n\t\t\t});\r\n\t\t\t\r\n\t\r\n\t}); \r\n\t\t\t \r\n\t \r\n })\r\n \r\n router.post('/customerpanel', (req,res) => {\r\n\t  \r\n\tif(req.body.action && req.body.action == 'change password'){\r\n\t\tres.redirect('/customerchangepassword')\r\n\t\t\t\r\n\t}   \r\n\t\r\n\tif(req.body.action && req.body.action == 'change password'){\r\n\t\tres.redirect('/customerchangephoneno')\r\n\t\t\t\r\n\t} \r\n\t\r\n\t\r\n\t\r\n\tif(req.body.action && req.body.action == 'change email'){\r\n\t\tres.redirect('/customerchangeemail')\r\n\t\t\t\r\n\t} \r\n\t \r\n\t\r\n\tif(req.body.action && req.body.action == 'change phone number'){\r\n\t\tres.redirect('/customerchangephoneno')\r\n\t\t\t\r\n\t} \r\n\t\r\n\tif(req.body.action && req.body.action == 'go to listings') {\r\n\t\tres.redirect('/listingsc')\r\n\t}\r\n\t \r\n }) \r\n \r\n router.get('/listingsc', (req,res) => {\r\n\t \r\n\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID` , (err,property_results) => {\r\n            console.log(err, property_results)\r\n          res.render('listingsc', {  \r\n\t\t      properties: property_results.rows\r\n\t\t\t}); \r\n\t\t\t\r\n\t\r\n\t});\r\n })\r\n\r\nrouter.post('/listingsc', (req,res) => {\r\n\tif(req.body.action && req.body.action == 'Order by Housing Type') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY propertytype` , (err,results) =>  {\r\n\t\t\tres.render('listingsc', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t})\r\n\t}else if(req.body.action && req.body.action == 'Order by Price') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY price`, (err,results) =>  {\r\n\t\t\tres.render('listingsc', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Order by Number of Bedrooms') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY num_bedroom`, (err,results) =>  {\r\n\t\t\tres.render('listingsc', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Order by Number of Bathrooms') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY num_bathroom`, (err,results) =>  {\r\n\t\t\tres.render('listingsc', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Order by Zip Code') {\r\n\t\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID ORDER BY zip`, (err,results) =>  {\r\n\t\t\tres.render('listingsc', {  \r\n\t\t      properties: results.rows\r\n\t\t\t}); \r\n\t\t}) \r\n\t}else if(req.body.action && req.body.action == 'Contact Us') {\r\n\t\tres.redirect('/contactus') \r\n\t}\r\n\t\r\n})\r\n\r\nrouter.get('/contactus' , (req,res) => {\r\n\tres.render('contactus')\r\n})\r\n\r\nrouter.post('/contactus' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'done' ){\r\n\t\tres.redirect('messagesent')\r\n\t}\r\n\t\r\n})\r\n\r\nrouter.get('/messagesent' , (req,res) => {\r\n\tres.render('messagesent')\r\n\t\r\n})\r\n\r\nrouter.post('/messagesent' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'Go back to listings' ) {\r\n\t\tres.redirect('/listingsc')\r\n\t}\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/customerchangepassword' , (req,res) => {\r\n\tres.render('customerchangepassword')\r\n})\r\n\r\nrouter.post('/customerchangepassword', (req,res) => {\r\n\tpool.query(`UPDATE customer SET password = '${req.body.password}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/customerpanel')\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/customerchangeemail', (req,res) => {\r\n\tres.render('customerchangeemail')\r\n\r\n})\r\n\r\nrouter.post('/customerchangeemail' , (req,res) => {\r\n\tpool.query(`UPDATE customer SET email = '${req.body.email}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/customerpanel')\r\n\t \r\n})\r\n\r\nrouter.get('/customerchangephoneno' , (req,res) => {\r\n\tres.render('customerchangephoneno')\r\n})\r\n\r\nrouter.post('/customerchangephoneno', (req,res) => {\r\n\tpool.query(`UPDATE customer SET phone_number = '${req.body.phoneno}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/customerpanel')\r\n\t\r\n})\r\n\r\napp.use('/',router);\r\nmodule.exports = app\r\n"]}