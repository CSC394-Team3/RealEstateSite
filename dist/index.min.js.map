{"version":3,"sources":["index.js"],"names":["express","require","app","port","process","env","PORT","Router","path","bodyParser","bcrypt","use","join","__dirname","pg","addressID","current_username","realtor","set","json","urlencoded","extended","Pool","connectionParams","DATABASE_URL","connectionString","ssl","rejectUnauthorized","database","password","Client","err","console","get","res","next","pool","title","render","req","query","property_results","log","rows","router","post","insertProperty","body","street","city","state","zip","addAddress","result","length","addressid","concat","propertytype","price","size","num_bedroom","num_bathroom","current_realtorID","updateAddress","redirect","action","updateProperty","username","hp","regeneratorRuntime","async","_context","prev","firstName","lastName","phoneno","email","awrap","hash","sent","stop","_context2","realtorID","agency","abrupt","name","realtor_results","compareSync","customer_results","customer","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,IAAMF,UADNA,WAAUC,QAAQ,eAGlBE,KAAOC,QAAQC,IAAIC,MAAQ,IAF3BJ,OAAMF,QAAZO,SAIMC,KAAOP,QAAQ,QAHfQ,GAAAA,QAAaR,MAKbS,OAAST,QAAQ,UAGvBC,IAAIS,IAAIX,QAAO,OAAQQ,KAAKI,KAAKC,UAAW,YAJ5CX,IAAMY,IAAE,cAAR,OAQA,IAEIC,UAFAC,iBAAmB,GAPjBN,kBAAiB,EAUnBO,SAAU,EAJdf,IAAIgB,IAAIT,WAAAU,QACRjB,IAAIc,IAAAA,QAAAA,QAGJd,IAAIe,IAAAA,WAOeG,WALnB,CAAAC,UAAA,KASA,IAAMC,KAAOrB,QAAQ,MAAMqB,KAJKD,iBAAS,KAGzCE,iBAFA,MAMInB,QANJC,IAAAmB,aAEA,CAMEC,iBAAkBrB,QAAQC,IAAImB,aALhCE,IAAMJ,CAAIK,oBAAV,IAIuB,CACrBF,KAAAA,+CACAC,KAAG,QAAIC,SAAAA,WAAFC,SAAA,WAFHzB,KAAA,KADJuB,KAOI,GAICG,QAAAA,IAAQN,kBACRK,IAAAA,KAAQ,IAAEd,GAAAgB,OAJQP,kBAMpBG,KAAAA,QAAK,SAAAK,GANJ,GAAAA,EAAA,MAAAA,IAUJC,OAAOC,IAAP,IAAYV,SAAAA,EAAZW,EAAAC,GACAD,EAAME,OAAO,QAAON,CAAPO,MAAcd,aAOzBW,OAAII,IAAAA,UAAgB,SAAAC,EAAAL,GAAAE,KAApBI,MAAoB,sFAApB,SAAAT,EAAAU,GADFT,QAAAU,IAAAX,EAAAU,GAMAP,EAAWI,OAAX,SAAsB,CAEhBE,WAALC,EAAAE,WAyBGC,OAAAC,KAAIC,UAAAA,SAAAA,EAAcZ,GAEjBE,GAAAA,EAAAA,KAAKI,QAAsB,OAAhBM,EAAAA,KAAAA,OAAgB,CAC3Bd,IAAAA,EAAAA,4DAAAA,OAAAO,EAAAQ,KAAAC,OAAAhB,QAAAA,OAAAO,EAAAQ,KAAAE,KAAAjB,QAAAA,OAAAO,EAAAQ,KAAAG,MAAAlB,QAAAA,OAAAO,EAAAQ,KAAAI,IAAAnB,mDAGCI,KAAAI,MAJDY,EAAA,SAAArB,EAAAsB,GAKA,GAAA,EAAAA,EAAAV,KAAAW,OAAA,CACDvC,UAZFsC,EAAAV,KAAA,GAAAY,UAcCvB,QAAAU,IAAAX,EAAAsB,GAVC,IAAIP,EAAc,6GAAAU,OAAgHjB,EAAIQ,KAAKU,aAAzH,QAAAD,OAA4IjB,EAAIQ,KAAKW,MAArJ,OAAAF,OAAgKjB,EAAIQ,KAAKY,KAAzK,OAAAH,OAAmLjB,EAAIQ,KAAKa,YAA5L,OAAAJ,OAA6MjB,EAAIQ,KAAKc,aAAtN,OAAAL,OAAwOM,kBAAxO,QAAAN,OAAgQzC,UAAhQ,MAcrBqB,KAAI2B,MAAAA,EAAa,SAAAhC,EAAAsB,GAEjBjB,QAAKI,IAAMuB,EAAAA,GACV7B,EAAA8B,SAAO,gBAWN9B,GAAAA,EAAAA,KAAG+B,QAAH,UAAa1B,EAAAQ,KAAbkB,OAAA,CAGA,IAAAF,EAAA,gCAAAP,OAAAjB,EAAAQ,KAAAC,OAAA,eAAAQ,OAAAjB,EAAAQ,KAAAE,KAAA,gBAAAO,OAAAjB,EAAAQ,KAAAG,MAAA,cAAAM,OAAAjB,EAAAQ,KAAAI,IAAA,yBAKFf,KAAAI,MAAAuB,EAAA,SAAAhC,EAAAsB,GAnBC,GAAGtB,EAqBJG,EAAGK,KAAIQ,yBArBN,CAyBAb,UAAI8B,EAASrB,KAAA,GAAb5B,UAGA,IAAAmD,EAAA,uCAAAV,OAAAjB,EAAAQ,KAAAU,aAAA,gBAAAD,OAAAjB,EAAAQ,KAAAW,MAAA,aAAAF,OAAAjB,EAAAQ,KAAAY,KAAA,sBAAAH,OAAAjB,EAAAQ,KAAAa,YAAA,uBAAAJ,OAAAjB,EAAAQ,KAAAc,aAAA,yBAAAL,OAAAzC,UAAA,KAGF6B,KAAOX,MAAIiC,EAAa,SAAAnC,EAAAsB,GACvBnB,QAAII,IAAOP,EAAAsB,GAGZT,EAAOC,SAAK,gBAAZN,EAAAQ,KAAAkB,QAAA,UAAA1B,EAAAQ,KAAAkB,QAaArB,KAAOX,MAAPW,2CAAAA,OAA4C7B,UAA5C6B,KAA4C,SAAAb,EAAAsB,GAC3CnB,QAAII,IAAOP,EAAAsB,GAIZT,EAAMoB,SAAM,eAAsBpB,OAAAX,IAAA,YAGxBc,SAAJR,EAAS4B,GAHmBjC,EAAAI,OAAA,cAlBlCM,OAAOC,KAAK,YAAa,SAACN,EAAIL,GAuB5BA,EAAAA,KAAG+B,QAAU,YAAA1B,EAAAQ,KAAAkB,SALmBhD,SAAA,EAAAiB,EAAA8B,SAAA,oBAAAzB,EAAAQ,KAAAkB,QAAA,WAAA1B,EAAAQ,KAAAkB,SAAAhD,SAAA,EAVhCiB,EAAI8B,SAAS,qBAwBZ9B,OAAAA,IAAAA,kBAAa,SAAAK,EAAAL,GAEZA,EAAAI,OANF,oBAVgCM,OAAAC,KAAA,kBAAA,SAAAN,EAAAL,GAAA,IAAAkC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAApC,MAAA,KAAA,EAAA,GAAAI,EAAAQ,KAAAoB,UAAA5B,EAAAQ,KAAAlB,UAAAU,EAAAQ,KAAA0B,WAAAlC,EAAAQ,KAAA2B,UAAAnC,EAAAQ,KAAA4B,SAAApC,EAAAQ,KAAA6B,MAAA,CAAAL,EAAApC,KAAA,EAAA,MAsBlCS,EAAMoB,SAAK,wBAtBuBO,EAAApC,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAoC,EAAApC,KAAA,EAAAkC,mBAAAQ,MA2BtBnE,OAAAoE,KAAAvC,EAAwBQ,KAAAlB,SAAKK,KA3BP,KAAA,EA2B3BW,EA3B2B0B,EAAAQ,KA6B9B7C,KAAGM,MAAHN,mGAAAA,OACFK,EAAAQ,KAAAoB,SADEjC,QAAAA,OACFkC,EADElC,QAAAA,OACFK,EAAAQ,KAAA0B,UADEvC,QAAAA,OACFK,EAAAQ,KAAA2B,SADExC,QAAAA,OACFK,EAAAQ,KAAA4B,QADEzC,QAAAA,OACFK,EAAAQ,KAAA6B,MADE1C,QACF,SAAAH,EAAAsB,GAHFrC,iBAAAuB,EAAAQ,KAAAoB,SAQCjC,EAAII,SAAO,oBAnCsB,KAAA,EAAA,IAAA,MAAA,OAAAiC,EAAAS,YAuCJpC,OAAAX,IAAA,uBACzB,SAAAM,EAAwBA,GADCL,EAAAI,OAAA,yBAAAM,OAAAC,KAAA,uBAAA,SAAAN,EAAAL,GAXzBK,EAAIQ,KAAKkB,QAA6B,aAAnB1B,EAAIQ,KAAKkB,QAWH/B,EAAA8B,SAAA,qBAMvBI,OAAAA,IAAAA,iBANuB,SAAA7B,EAAAL,GAQ7BE,EAAAA,OAAAA,mBAOEQ,OAAAC,KAPF,iBAAA,SAAAN,EAAAL,GAAA,IAAAkC,EAAA,OAAAC,mBAAAC,MAAA,SAAAW,GAAA,OAAA,OAAAA,EAAAT,KAAAS,EAAA9C,MAAA,KAAA,EAAA,GAPKI,EAAIQ,KAAKmC,WAAc3C,EAAIQ,KAAKoB,UAAa5B,EAAIQ,KAAKlB,UAAaU,EAAIQ,KAAKoC,QAAW5C,EAAIQ,KAAK0B,WADxElC,EAAAQ,KAAA2B,UAAAnC,EAAAQ,KAAA4B,SAAApC,EAAAQ,KAAA6B,MAQ7B,CAAAK,EAAA9C,KAAA,EAAA,MAAA,OAAA8C,EAAAG,OAAA,SAR6BlD,EAAA8B,SAAA,wBAQ7B,KAAA,EAAA,OAAAiB,EAAA9C,KAAA,EAAAkC,mBAAAQ,MAR6BnE,OAAAoE,KAAAvC,EAAAQ,KAAAlB,SAAA,KAQ7B,KAAA,EAR6BuC,EAQ7Ba,EAAAF,KARD3C,KAAAI,MAAA,sHAAAgB,OAoBWjB,EAAAQ,KAAAmC,UApBX,QAAA1B,OAoBmCjB,EAAAQ,KAAAoB,SApBnC,QAAAX,OAoBgDY,EApBhD,QAAAZ,OAoBgDjB,EAAAQ,KAAAoC,OApBhD,OAAA3B,OAoBgDjB,EAAAQ,KAAA0B,UApBhD,QAAAjB,OAoBgDjB,EAAAQ,KAAA2B,SApBhD,QAAAlB,OAoBgDjB,EAAAQ,KAAA4B,QApBhD,QAAAnB,OAoBgDjB,EAAAQ,KAAA6B,MApBhD,aAqBK,SAACtC,EAAAA,GADNwB,kBAAAvB,EAAAQ,KAAAmC,UAIAtC,iBAAYL,EAAAQ,KAAAoB,SACXjC,EAAIK,SAAS0B,mBAjBb,KAAA,EAAA,IAAA,MAAA,OAAAgB,EAAAD,YA4BDpC,OAAOC,IAAP,sBAAyBN,SAAAA,EAAIL,GAC5BA,EAAGjB,OAAH,wBAGCiB,OAAGW,KAACmB,sBAAJ,SAAAzB,EAAAL,GACAK,EAAAQ,KAAAkB,QAAA,aAAA1B,EAAAQ,KAAAkB,QALF/B,EAAA8B,SAAA,oBAeCpB,OAAGL,IAAIQ,WAAJ,SAAAR,EAAsBL,GACxBA,EAAAA,OAAI8B,kBAGJ9B,OAAGW,KAACmB,WAAS,SAAAzB,EAAAL,GACbjB,QANFiB,EAAA8B,SAAA,iBAYC9B,EAAII,SAAO,oBAUXM,OAAGL,IAAIQ,SAAJ,SAAAR,EAAmBA,GACpBvB,EAAAA,OAAAA,WAIC4B,OAAAC,KAAGQ,SAAYC,SAAAA,EAAZpB,GACFA,EAAAA,KAAI8B,QAAJ,YAAazB,EAAAQ,KAAAkB,QACb/B,EAAA8B,SAAA,kBACDzB,EAAAQ,KAAGM,QAAuB,WAAXC,EAAAA,KAAfW,QACC/B,EAAA8B,SAAInC,mBAOHG,OAAAA,IAAAA,iBAAA,SAAAO,EAAAL,GACDA,EAAAI,OAAA,mBAQHJ,OAAGW,KAACmB,iBAAJ,SAAAzB,EAAAL,GAGAjB,SAhCF,EAmCCiB,EAAII,KAAO2B,QAAX,SAAW1B,EAAXQ,KAAAkB,SADDjD,iBAAAuB,EAAAQ,KAAAoB,SAIAvB,KAAOC,MAAPD,6CAAAA,OAAyCL,EAAAQ,KAAAoB,SAAzCvB,KAAyC,SAAAb,EAAAsB,GASzC,GARCrB,QAAOe,IAAKkB,EAAAA,GADb,GAAAZ,EAAAV,KAAAW,QASAV,EAAOX,SAAI,eAAX,EAAAoB,EAAAV,KAAAW,OAAA,CAIAV,IAAOC,EAAKQ,EAAeV,KAAA,GAAAd,SAGnBkB,OAAKkB,YAAclB,EAAJA,KAASkB,SAAUpC,GAH1CK,EAAA8B,SAAA,mBASA9B,EAAA8B,SAAA,YAMMhC,QAAMU,IAAAH,QAtCRA,EAAIQ,KAAKkB,QAA6B,YAAnB1B,EAAIQ,KAAKkB,QAoD5B/B,EAAA8B,SAAGX,eAKDnB,OAAAA,IAAAA,cAAa,SAAAK,EAAAL,GACbA,EAAAI,OAHD,gBAMCM,OAAAC,KAAA,cAAA,SAAAN,EAAAL,GACDK,EAAAQ,KAAAkB,QAAA,aAAA1B,EAAAQ,KAAAkB,QAED/B,EAlBA8B,SAAA,kBAoBFzB,EAAAQ,KAAAkB,QAAA,YAAA1B,EAAAQ,KAAAkB,QApDA/B,EAAI8B,SAAS,qBAgEfpB,OAAOX,IAAI,aAAX,SAAAM,EAA4BL,GAE3BE,EAAAA,OAAA,eAIoBiD,OAAAA,KAAMrE,aAAAA,SADauB,EAAAL,GAElBjB,EAAAA,KAAOgD,QAAE,aAAAqB,EAAAA,KAAgB3C,QAFPT,EAA3B8B,SAAA,iBAHZzB,EAAAQ,KAAAkB,QAAA,YAAA1B,EAAAQ,KAAAkB,QAFD/B,EAAA8B,SAAA,oBA9CApB,OAAOX,IAAI,gBAAiB,SAACM,EAAIL,GAiE/BA,EAAAI,OAAOS,kBAMNb,OAAGW,KAACmB,gBAAS,SAAAzB,EAAAL,GA/DhBjB,SAAU,EAwEPsB,EAAAQ,KAAAkB,QAAA,SAAA1B,EAAAQ,KAAAkB,SAGDjD,iBAAGuB,EAAmBA,KAAIQ,SACzBb,KAAI8B,MAAJ9B,4CAAAA,OAAAK,EAAAQ,KAAAoB,SAAAjC,KAAA,SAAAH,EAAAsB,GAhEC,GAkEDrB,QAAAU,IAAAX,EAAAsB,GAEyBN,GAAvBR,EAAAI,KAASsB,QACX/B,EAAI8B,SAAS,cArEY,EAArBX,EAAOV,KAAKW,OAAW,CAwE5B,IAAMzB,EAAMoC,EAAU1B,KAAIQ,GAAKkB,SAE9BvD,OAAA6E,YAAAhD,EAAAQ,KAAAlB,SAAAA,IAnCFiC,kBAAAT,EAAAV,KAAA,GAAAuC,UAuCKhD,EAAN8B,SAAW,mBAAX9B,EAAA8B,SAAA,YAIOnB,QAAKH,IAAAH,QAiBZA,EAAAQ,KAAAkB,QAAA,YAAA1B,EAAAQ,KAAAkB,QAIArB,EAAMoB,SAAM,eAYZpB,OAAOC,IAAP,gBAAY,SAAAN,EAAZL,GAECA,KAAI8B,MAAJ9B,4CAAAA,OAAAlB,iBAAAkB,KAAA,SAAAH,EAAAuD,GAFDtD,QAAAU,IAAAX,EAAAuD,GAOYpD,EAAAI,OAAA,eAAX,CADD+C,KAAArE,iBAIYC,QAAAqE,EAA0B/C,KAAIL,SAW9BF,OAAAA,KAAQU,gBAAS8C,SAAAA,EAAAA,GAGRH,EAAAA,KAAMrE,QADa,QACbA,EADa+B,KAAAkB,QAElBwB,EAAAA,SAAUD,WAPhCjD,EAAAQ,KAAAkB,QAAA,mBAAA1B,EAAAQ,KAAAkB,QAgBCrB,EAAOC,SAAK,0BAnGRN,EAAIQ,KAAKkB,QAA6B,mBAAnB1B,EAAIQ,KAAKkB,QA0GhC/B,EAAGK,SAAS0B,yBAUX1B,EAAAQ,KAAAkB,QAAA,gBAAA1B,EAAAQ,KAAAkB,QA5GC/B,EAAI8B,SAAS,uBAoHfzB,EAAMQ,KAAHkB,QAAmB,iBAAnB1B,EAAsBQ,KAAHkB,QACrB/B,EAAG8B,SAAH,wBAMGzB,EAACD,KAAO2B,QAAX,uBAAA1B,EAAAQ,KAAAkB,QADD/B,EAAA8B,SAAA,yBAWGzB,EAACD,KAAO2B,QAAX,kBAAW1B,EAAAQ,KAAAkB,QADZ/B,EAAA8B,SAAA,gBAWApB,OAAOX,IAAI,aAAA,SAAAM,EAAAL,GACVA,EAAII,OAAO,eAKXF,OAAKI,KAAL,aAAA,SAAAD,EAAAL,MASDU,OAAOC,IAAP,uBAAY,SAAZN,EAAsCL,GACrCE,EAAAA,OAAA,yBAMDlC,OAAIwF,KAAOvF,uBAAY,SAAAoC,EAAAL,GACrBF,KAAAA,MAAAA,gCAAAA,OAAAO,EAAAQ,KAAAoC,OAAAnD,yBAAAA,OAAAhB,iBAAAgB,OADFE,EAAA8B,SAAA,mBA5HApB,OAAOX,IAAI,yBAA2B,SAACM,EAAIL,GAC1CA,EAAII,OAAO,2BAGZM,OAAOC,KAAK,yBAA0B,SAACN,EAAIL,GAC1CE,KAAKI,MAAL,kCAAAgB,OAA6CjB,EAAIQ,KAAKlB,SAAtD,yBAAA2B,OAAsFxC,iBAAtF,OACAkB,EAAI8B,SAAS,mBAKdpB,OAAOX,IAAI,sBAAuB,SAACM,EAAIL,GACtCA,EAAII,OAAO,wBAIZM,OAAOC,KAAK,sBAAwB,SAACN,EAAIL,GACxCE,KAAKI,MAAL,+BAAAgB,OAA0CjB,EAAIQ,KAAK6B,MAAnD,yBAAApB,OAAgFxC,iBAAhF,OACAkB,EAAI8B,SAAS,mBAIdpB,OAAOX,IAAI,wBAA0B,SAACM,EAAIL,GACzCA,EAAII,OAAO,0BAGZM,OAAOC,KAAK,wBAAyB,SAACN,EAAIL,GACzCE,KAAKI,MAAL,sCAAAgB,OAAiDjB,EAAIQ,KAAK4B,QAA1D,yBAAAnB,OAAyFxC,iBAAzF,OACAkB,EAAI8B,SAAS,mBAMdpB,OAAOX,IAAI,iBAAkB,SAACM,EAAIL,GAEjCE,KAAKI,MAAL,6CAAAgB,OAAwDxC,iBAAxD,KAA6E,SAACe,EAAIyD,GACvExD,QAAQU,IAAIX,EAAKyD,GAEjBtD,EAAII,OAAO,gBAAiB,CACnB+C,KAAMrE,iBACLyE,SAAUD,EAAiB7C,KAAK,SASrDC,OAAOC,KAAK,iBAAkB,SAACN,EAAIL,GAEhCK,EAAIQ,KAAKkB,QAA6B,mBAAnB1B,EAAIQ,KAAKkB,QAC9B/B,EAAI8B,SAAS,2BAIXzB,EAAIQ,KAAKkB,QAA6B,mBAAnB1B,EAAIQ,KAAKkB,QAC9B/B,EAAI8B,SAAS,0BAMXzB,EAAIQ,KAAKkB,QAA6B,gBAAnB1B,EAAIQ,KAAKkB,QAC9B/B,EAAI8B,SAAS,wBAKXzB,EAAIQ,KAAKkB,QAA6B,uBAAnB1B,EAAIQ,KAAKkB,QAC9B/B,EAAI8B,SAAS,0BAIXzB,EAAIQ,KAAKkB,QAA6B,kBAAnB1B,EAAIQ,KAAKkB,QAC9B/B,EAAI8B,SAAS,gBAKdpB,OAAOX,IAAI,aAAc,SAACM,EAAIL,GAC7BA,EAAII,OAAO,eAGbM,OAAOC,KAAK,aAAc,SAACN,EAAIL,MAM/BU,OAAOX,IAAI,0BAA4B,SAACM,EAAIL,GAC3CA,EAAII,OAAO,4BAGZM,OAAOC,KAAK,0BAA2B,SAACN,EAAIL,GAC3CE,KAAKI,MAAL,mCAAAgB,OAA8CjB,EAAIQ,KAAKlB,SAAvD,yBAAA2B,OAAuFxC,iBAAvF,OACAkB,EAAI8B,SAAS,oBAKdpB,OAAOX,IAAI,uBAAwB,SAACM,EAAIL,GACvCA,EAAII,OAAO,yBAIZM,OAAOC,KAAK,uBAAyB,SAACN,EAAIL,GACzCE,KAAKI,MAAL,gCAAAgB,OAA2CjB,EAAIQ,KAAK6B,MAApD,yBAAApB,OAAiFxC,iBAAjF,OACAkB,EAAI8B,SAAS,oBAIdpB,OAAOX,IAAI,yBAA2B,SAACM,EAAIL,GAC1CA,EAAII,OAAO,2BAGZM,OAAOC,KAAK,yBAA0B,SAACN,EAAIL,GAC1CE,KAAKI,MAAL,uCAAAgB,OAAkDjB,EAAIQ,KAAK4B,QAA3D,yBAAAnB,OAA0FxC,iBAA1F,OACAkB,EAAI8B,SAAS,oBAId9D,IAAIS,IAAI,IAAIiC,QACZ1C,IAAIwF,OAAOvF,KAAM,WACf6B,QAAQU,IAAR,iCAAAc,OAA6CrD","file":"index.min.js","sourcesContent":["const express = require('express')\r\nconst app = express()\r\nconst bodyParser = require('body-parser');\r\nconst port = process.env.PORT || 3000\r\nconst router = express.Router();\r\nconst path = require('path') \r\nconst pg = require('pg')\r\nconst bcrypt = require('bcrypt')\r\n\r\n//Set location for accessing files\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n//Set the view engine for the express app  \r\napp.set(\"view engine\", \"pug\")\r\nvar current_username = \"\";\r\nvar current_realtorID = 2;\r\nvar addressID \r\nvar realtor = true;\r\n\r\n//for parsing application/json\r\napp.use(bodyParser.json());\r\napp.use(express.json())\r\n\r\n//for parsing application/xwww-\r\napp.use(bodyParser.urlencoded({ extended:true }));\r\n//form-urlencoded\r\n\r\n//Database\r\nconst Pool = require('pg').Pool\r\n\r\nvar connectionParams =  null;\r\nif (process.env.DATABASE_URL != null){\r\n    connectionParams = {\r\n\t\tconnectionString: process.env.DATABASE_URL,\r\n\t\tssl: { rejectUnauthorized: false }\r\n    } \r\n}\r\n\r\nelse{\r\n    connectionParams = {\r\n\t\thost: 'willowrealestate.postgres.database.azure.com',\r\n\t\tuser: 'team5',\r\n\t   \tpassword: 'Willow5!',\r\n\t   \tdatabase: 'postgres',\r\n\t \tport: 5432 ,\r\n\t \tssl: true\r\n\t}\r\n}\r\n\r\nconsole.log(connectionParams)\r\nconst pool = new pg.Client(connectionParams)\r\n\r\npool.connect(err => {\r\n    if (err) throw err; \r\n});\r\n \r\nrouter.get('/', function(req, res, next) {\r\n  res.render('index', { title: 'Willow' });\r\n});\r\n\t\r\n \r\n\r\nrouter.get('/insert', (req,res) => {  \r\n\t \r\n\tpool.query(`SELECT * FROM property INNER JOIN address on address.addressID = property.addressID` , (err,property_results) => {\r\n            console.log(err, property_results)\r\n          res.render('insert', {  \r\n\t\t      properties: property_results.rows\r\n\t\t\t}); \r\n\t\t\t\r\n\t\r\n\t});\r\n\t \r\n\t\r\n\t\r\n\t\r\n})\r\n\r\n\r\n\r\n\r\nrouter.post('/insert', (req, res) => {  \r\n\tif(req.body.action && req.body.action == 'add'){\r\n\t\tvar addAddress = `INSERT INTO address (street, city, state, zip) VALUES ( '${req.body.street}', '${req.body.city}', '${req.body.state}', '${req.body.zip}' ) ON conflict do nothing RETURNING addressID ` \r\n\t\t\r\n\t\tpool.query(addAddress, (err,result) => {\r\n\t\t\t if(result.rows.length > 0) {\r\n\t\t\t\taddressID = result.rows[0].addressid \r\n\t\t\t\tconsole.log(err,result)\r\n\t\t\t\tvar insertProperty = `INSERT INTO property (propertyType, price, size, num_bedroom, num_bathroom,realtorID, addressID) VALUES ('${req.body.propertytype}', '${req.body.price}','${req.body.size}','${req.body.num_bedroom}','${req.body.num_bathroom}','${current_realtorID}', '${addressID}')`\r\n\t\t\t\r\n\t\t\t\t\tpool.query(insertProperty, (err, result) => {\r\n\t\t\t\t\tconsole.log(err, result) \r\n\t\t\t\t\tres.redirect('/insert')\r\n\t\t\r\n\t\t\t\t\t}) \r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t \r\n\t\t} \r\n\t\t  \r\n\tif(req.body.action && req.body.action == 'update'){ \r\n\t\r\n\tvar updateAddress = `UPDATE address SET street = '${req.body.street}', city = '${req.body.city}', state = '${req.body.state}', zip = '${req.body.zip}' RETURNING addressID`\r\n\t\r\n\tpool.query(updateAddress , (err,result) => {\r\n\t\tif(err){\r\n\t\t\tres.send('Address Not Found')\r\n\t\t\treturn\r\n\t\t}else{\r\n\t\t\taddressID = result.rows[0].addressID \r\n\t\t\t\r\n\t\t\tvar updateProperty = `UPDATE property SET propertyType = '${req.body.propertytype}', price = '${req.body.price}', size='${req.body.size}', num_bedroom = '${req.body.num_bedroom}', num_bathroom = '${req.body.num_bathroom}' WHERE addressID = '${addressID}'`\r\n\t\r\n\t\t\tpool.query( updateProperty , (err,result) => {\r\n\t\t\tconsole.log(err, result)\r\n\r\n\t\t\tres.redirect('/insert')\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t}\r\n\t})\r\n\r\n\t\r\n\t\r\n}\r\n\r\n\tif(req.body.action && req.body.action == 'delete'){ \r\n\t\tpool.query(`DELETE FROM property WHERE addressID = '${addressID}'`, (err,result) => { \r\n\t\tconsole.log(err, result) \r\n\t\t\r\n\t\tres.redirect('/insert')\r\n\t\t\r\n\t\t})\r\n\t}\r\n}) \r\n\r\nrouter.get('/register', (req,res) => { \r\n\tres.render('register')\r\n}) \r\n\r\nrouter.post('/register', (req,res) => {\r\n\tif(req.body.action && req.body.action == 'customer'){\r\n\t\trealtor = false;\r\n\t\tres.redirect('/customersignup') \r\n\t\t\r\n\t}\r\n\tif(req.body.action && req.body.action == 'realtor'){\r\n\t\trealtor = true;\r\n\t\tres.redirect('/realtorsignup')\r\n\t}\r\n})\r\n\r\n\r\nrouter.get('/customersignup',  (req,res) => {\r\n\tres.render('customersignup')\r\n\r\n})\r\n\r\nrouter.post('/customersignup' ,   async (req,res) => {\r\n\t\r\n\t\r\n\tif( !req.body.username || !req.body.password || !req.body.firstName || !req.body.lastName || !req.body.phoneno || !req.body.email){\r\n\t\t\r\n\t\tres.redirect('/customersignuperror')\r\n\t}else{\r\n\t \r\n\t  const hp = await bcrypt.hash(req.body.password, 10)   \r\n\t \r\n\t pool.query(`INSERT INTO customer(user_name,password,first_name,last_name,phone_number,email)\r\n\t\tVALUES ( '${req.body.username}', '${hp}', '${req.body.firstName}', '${req.body.lastName}', '${req.body.phoneno}', '${req.body.email}' ) `, (err, result) => {\r\n\t\t current_username = req.body.username; \r\n\t\t \r\n\t\t res.redirect('/customerlogin')\r\n\t\t \r\n\t\t } );  \r\n\t\t\r\n\t}\r\n\t\r\n})\r\n\r\nrouter.get('/customersignuperror' , (req,res) => {\r\n\tres.render('customersignuperror')\r\n\t\r\n})\r\n\r\nrouter.post('/customersignuperror', (req,res) => {\r\n\tif( req.body.action && req.body.action == 'try again' ){ \r\n\t\t  res.redirect('/customersignup')\r\n\t} \r\n})\r\n\t\r\n\r\nrouter.get('/realtorsignup', (req,res) => {\r\n\tres.render('realtorsignup')\r\n\t\r\n})\r\n\r\nrouter.post('/realtorsignup', async (req,res) => {\r\n\tif( !req.body.realtorID || !req.body.username || !req.body.password || !req.body.agency || !req.body.firstName ||\r\n\t !req.body.lastName || !req.body.phoneno || !req.body.email)  \r\n\t \r\n\t return res.redirect('/realtorsignuperror')\r\n\t\r\n\tconst hp = await bcrypt.hash(req.body.password, 10)\r\n\t\r\n\tpool.query(`INSERT INTO realtor(realtorID, user_name,password, agency, first_name,last_name,phone_number,email)\r\n\t\tVALUES ( '${req.body.realtorID}' ,'${req.body.username}', '${hp}', '${req.body.agency}','${req.body.firstName}', '${req.body.lastName}', '${req.body.phoneno}', '${req.body.email}' ) \r\n\t `, (err, result) => {\r\n\t\t current_realtorID = req.body.realtorID;\r\n\t\t current_username = req.body.username;\r\n\t\tres.redirect('/realtorlogin')\r\n\t\t\r\n\t\t} ); \r\n\t\r\n\t\r\n})\r\n\r\nrouter.get('/realtorsignuperror' , (req,res) => { \r\n\t res.render('realtorsignuperror')\r\n}) \r\n\r\nrouter.post('/realtorsignuperror' , (req,res) => {\r\n\tif( req.body.action && req.body.action == 'try again' ){ \r\n\t\t  res.redirect('/realtorsignup')\r\n\t} \r\n\t\r\n})\r\n\r\nrouter.get('/invalid', (req,res) => {\r\n\tres.render('invalidlogin')\r\n\t\r\n})\r\n\r\nrouter.post('/invalid', (req,res) => { \r\n\tif(realtor){\r\n\t\tres.redirect('/realtorlogin')\r\n\t}else{\r\n\t\tres.redirect('/customerlogin')\r\n\t}\r\n\t\r\n})\r\n \r\nrouter.get('/login' , (req,res) => {\r\n\tres.render('index')\r\n\t\r\n})\r\n\r\nrouter.post('/login' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'customer') {\r\n\t\tres.redirect('/customerlogin')\r\n\t}\t\r\n\tif(req.body.action && req.body.action == 'realtor') {\r\n\t\tres.redirect('/realtorlogin')\r\n\t}\t\r\n\t \r\n})\r\n\r\n\r\nrouter.get('/customerlogin', (req,res) => {\r\n\tres.render('customerlogin')\r\n\t\r\n})\r\n\r\n\r\n\r\nrouter.post('/customerlogin',    (req,res) => { \r\n \r\nrealtor = false\r\n//check user name and password with db\r\n\tif(req.body.action && req.body.action == 'login'){\r\n \t\tcurrent_username = req.body.username;\r\n\t\t\t pool.query(`SELECT * FROM CUSTOMER WHERE user_name = '${req.body.username}'`, (err,result) => {\r\n\t\t\t\tconsole.log(err,result) \r\n\t\t\t\t\r\n\t\t\t\tif(result.rows.length == 0) {\r\n\t\t\t\t\tres.redirect('/nocustomer') \r\n\t\t\t\t}\r\n\t\t\t\tif(result.rows.length > 0){\r\n\t\t\t\t\tvar password = result.rows[0].password\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(  bcrypt.compareSync(req.body.password, password) ){\r\n\t\t\t\t\t\tres.redirect('/customerpanel')\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tres.redirect('/invalid') \r\n\t\t\t\t\t\tconsole.log(req)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t}); \r\n\t\t\t}\r\n\t \r\n\t\t \r\n\t\r\n\tif(req.body.action && req.body.action == 'register'){\r\n\t\tres.redirect('/register');\r\n\t}\r\n\t\r\n })\r\n\r\nrouter.get('/nocustomer' , (req,res) => {\r\n\tres.render('nocustomer')\r\n})\r\n\r\nrouter.post('/nocustomer' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'try again')\r\n\t\tres.redirect('/customerlogin')\r\n\tif(req.body.action && req.body.action == 'register')\r\n\t\tres.redirect('/customersignup')\r\n\t\r\n\t\r\n})\r\n\r\nrouter.get('/norealtor' , (req,res) => {\r\n\tres.render('norealtor')\r\n})\r\n\r\nrouter.post('/norealtor' , (req,res) => {\r\n\tif(req.body.action && req.body.action == 'try again')\r\n\t\tres.redirect('/realtorlogin')\r\n\tif(req.body.action && req.body.action == 'register')\r\n\t\tres.redirect('/realtorsignup')\r\n\t\r\n\t\r\n})\r\n\r\nrouter.get('/realtorlogin', (req,res) => {\r\n\tres.render('realtorlogin')\r\n\t\r\n})\r\n\r\n\r\nrouter.post('/realtorlogin', (req,res) => { \r\n\r\nrealtor = true\r\n\r\n//check user name and password with db\r\n\tif(req.body.action && req.body.action == 'login'){\r\n\t\t   \r\n\t\t\tcurrent_username = req.body.username;\r\n\t\t\t pool.query(`SELECT * FROM realtor WHERE user_name = '${req.body.username}'`, (err,result) => {\r\n\t\t\t\tconsole.log(err,result)\r\n\t\t\t\t\r\n\t\t\t\tif(result.rows.length == 0)\r\n\t\t\t\t\tres.redirect('/norealtor') \r\n\t\t\t\t\r\n\t\t\t\tif(result.rows.length > 0){\r\n\t\t\t\t\tvar password = result.rows[0].password\r\n\t\t\t\t\t\r\n\t\t\t\t\tif( bcrypt.compareSync(req.body.password, password) ){\r\n\t\t\t\t\t\tcurrent_realtorID = result.rows[0].realtorID\r\n\t\t\t\t\t\tres.redirect('/realtorpanel')\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t res.redirect('/invalid') \r\n\t\t\t\t\t\t console.log(req)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t})\r\n\t\t\t\t\r\n\t}\r\n\t \r\n\t\t \r\n\t\r\n\tif(req.body.action && req.body.action == 'register'){\r\n\t\tres.redirect('/register');\r\n\t}\r\n\t\r\n })\r\n\r\n\r\n \r\nrouter.get('/realtorpanel', (req,res) => {\r\n\t\r\n\tpool.query(`SELECT * FROM realtor WHERE user_name = '${current_username}'`, (err,realtor_results) => {\r\n            console.log(err, realtor_results)\r\n         \r\n             res.render('realtorpanel', { \r\n                     name: current_username,\r\n                      realtor: realtor_results.rows[0] \r\n\t\t\t});\r\n\t});   \r\n\t \r\n })\r\n \r\n router.post('/realtorpanel', (req,res) => {\r\n\t \r\n\t\tif(req.body.action && req.body.action == 'crud'){\r\n\t\t\tres.redirect('/insert')\r\n\t\t}\r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change password'){\r\n\t\t\tres.redirect('/realtorchangepassword')\r\n\t\t\t\t\r\n\t\t}   \r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change password'){\r\n\t\t\tres.redirect('/realtorchangephoneno')\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change email'){\r\n\t\t\tres.redirect('/realtorchangeemail')\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\t\t\r\n\t\tif(req.body.action && req.body.action == 'change agency'){\r\n\t\t\tres.redirect('/realtorchangeagency')\r\n\t\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\tif(req.body.action && req.body.action == 'change phone number'){\r\n\t\t\tres.redirect('/realtorchangephoneno')\r\n\t\t}\t\t\r\n\t\t\t\t\r\n\t\tif(req.body.action && req.body.action == 'go to listings'){\r\n\t\t\tres.redirect('/listingsr')\r\n\t\t}  \r\n\t \r\n })\r\n \r\nrouter.get('/listingsr', (req,res) => {\r\n\t res.render('listingsr')\r\n })\r\n\r\nrouter.post('/listingsr', (req,res) => {\r\n\t\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/realtorchangeagency', (req,res) => {\r\n\tres.render('realtorchangeagency')\r\n\r\n})\r\n\r\nrouter.post('/realtorchangeagency' , (req,res) => {\r\n\tpool.query(`UPDATE realtor SET agency = '${req.body.agency}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t \r\n})\r\n\r\nrouter.get('/realtorchangepassword' , (req,res) => {\r\n\tres.render('realtorchangepassword')\r\n})\r\n\r\nrouter.post('/realtorchangepassword', (req,res) => {\r\n\tpool.query(`UPDATE realtor SET password = '${req.body.password}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/realtorchangeemail', (req,res) => {\r\n\tres.render('realtorchangeemail')\r\n\r\n})\r\n\r\nrouter.post('/realtorchangeemail' , (req,res) => {\r\n\tpool.query(`UPDATE realtor SET email = '${req.body.email}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t \r\n})\r\n\r\nrouter.get('/realtorchangephoneno' , (req,res) => {\r\n\tres.render('realtorchangephoneno')\r\n})\r\n\r\nrouter.post('/realtorchangephoneno', (req,res) => {\r\n\tpool.query(`UPDATE realtor SET phone_number = '${req.body.phoneno}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/realtorpanel')\r\n\t\r\n})\r\n\r\n\r\n\r\nrouter.get('/customerpanel', (req,res) => { \r\n\t\r\n\tpool.query(`SELECT * FROM customer WHERE user_name = '${current_username}'`, (err,customer_results) => {\r\n            console.log(err, customer_results)\r\n         \r\n            res.render('customerpanel', { \r\n                     name: current_username,\r\n                      customer: customer_results.rows[0] \r\n\t\t\t});\r\n\t\t\t\r\n\t\r\n\t}); \r\n\t\t\t \r\n\t \r\n })\r\n \r\n router.post('/customerpanel', (req,res) => {\r\n\t  \r\n\tif(req.body.action && req.body.action == 'change password'){\r\n\t\tres.redirect('/customerchangepassword')\r\n\t\t\t\r\n\t}   \r\n\t\r\n\tif(req.body.action && req.body.action == 'change password'){\r\n\t\tres.redirect('/customerchangephoneno')\r\n\t\t\t\r\n\t} \r\n\t\r\n\t\r\n\t\r\n\tif(req.body.action && req.body.action == 'change email'){\r\n\t\tres.redirect('/customerchangeemail')\r\n\t\t\t\r\n\t} \r\n\t \r\n\t\r\n\tif(req.body.action && req.body.action == 'change phone number'){\r\n\t\tres.redirect('/customerchangephoneno')\r\n\t\t\t\r\n\t} \r\n\t\r\n\tif(req.body.action && req.body.action == 'go to listings') {\r\n\t\tres.redirect('/listingsc')\r\n\t}\r\n\t \r\n }) \r\n \r\n router.get('/listingsc', (req,res) => {\r\n\t res.render('listingsc')\r\n })\r\n\r\nrouter.post('/listingsc', (req,res) => {\r\n\t\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/customerchangepassword' , (req,res) => {\r\n\tres.render('customerchangepassword')\r\n})\r\n\r\nrouter.post('/customerchangepassword', (req,res) => {\r\n\tpool.query(`UPDATE customer SET password = '${req.body.password}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/customerpanel')\r\n\t\r\n})\r\n\r\n\r\nrouter.get('/customerchangeemail', (req,res) => {\r\n\tres.render('customerchangeemail')\r\n\r\n})\r\n\r\nrouter.post('/customerchangeemail' , (req,res) => {\r\n\tpool.query(`UPDATE customer SET email = '${req.body.email}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/customerpanel')\r\n\t \r\n})\r\n\r\nrouter.get('/customerchangephoneno' , (req,res) => {\r\n\tres.render('customerchangephoneno')\r\n})\r\n\r\nrouter.post('/customerchangephoneno', (req,res) => {\r\n\tpool.query(`UPDATE customer SET phone_number = '${req.body.phoneno}' WHERE user_name = '${current_username}' `  )\r\n\tres.redirect('/customerpanel')\r\n\t\r\n})\r\n\r\napp.use('/',router);\r\napp.listen(port, () => {\r\n  console.log(`Example app listening on port ${port}`)\r\n})\r\n"]}